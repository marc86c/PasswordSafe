@page "/home/{Username}"
@rendermode InteractiveServer

<div class="container">
    @if (user != null)
    {
        <h1>Guten Tag @user.Username</h1>
        @if (newData != null)
        {
            <EditForm Model="@newData" OnValidSubmit="@(async () => await Save())" FormName="NewDataForm" class="form">
                <input placeholder="Provider" @bind-value="newData.Provider" class="input-field" />
                <input placeholder="Username" @bind-value="newData.Username" class="input-field" />
                <input placeholder="Password" type="password" @bind-value="newData.Password" class="input-field" />
                <button type="submit" class="submit-button">Speichern</button>
            </EditForm>
        }
        <div class="action-buttons">
            <button @onclick="@Add" class="action-button">Add +</button>
            <button @onclick="@Logout" class="action-button">Logout</button>
        </div>
        <div class="data-section">
            <h4>Daten</h4>
            <div class="search-box">
                <FluentSearch Placeholder="Suchen" Value="@filterCriteria" ValueChanged="@((value) => { filterCriteria = value; StateHasChanged(); })"></FluentSearch>
            </div>
            @foreach (var data in AuthenticationDatas)
            {
                <div class="data-item">
                    <div class="data-field">
                        <h5>Provider</h5>
                        <input readonly @bind-value="@data.Provider" class="input-field"></input>
                    </div>
                    <div class="data-field">
                        <h5>Username</h5>
                        <input readonly @bind-value="@data.Username" class="input-field"></input>
                    </div>
                    <div class="data-field">
                        <h5>Password</h5>
                        @if (openPasswordIndex.HasValue && openPasswordIndex.Value == user.AuthenticationDatas.IndexOf(data))
                        {
                            <input readonly @bind-value="@data.Password" class="input-field"></input>
                        }
                        else
                        {
                            <input readonly placeholder="*****" class="input-field" />
                        }
                    </div>
                    <div class="delete-button">
                        @if (openPasswordIndex.HasValue && openPasswordIndex.Value == user.AuthenticationDatas.IndexOf(data))
                        {
                            <button @onclick="@( () => OpenPassword(null))" class="toggle-button">Schließen</button>
                        }
                        else
                        {
                            <button @onclick="@(() => OpenPassword(user.AuthenticationDatas.IndexOf(data)))" class="toggle-button">Öffnen</button>
                        }
                        <button @onclick="@(async () => await DeleteData(user.AuthenticationDatas.IndexOf(data)))" class="action-button">X</button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>loading...</p>
    }
</div>
