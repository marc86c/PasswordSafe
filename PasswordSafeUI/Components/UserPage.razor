@page "/home/{Username}"
@using PasswordSafeCommon.Model
@rendermode InteractiveServer

<div class="container">
    @if (user != null)
    {
        <h1>Guten Tag @user.Username</h1>
        @if (newData != null)
        {
            <EditForm Model="@newData" OnValidSubmit="@(async () => await Save())" FormName="NewDataForm" class="form">
                <input placeholder="Provider" @bind-value="newData.Provider" class="input-field" />
                <input placeholder="Username" @bind-value="newData.Username" class="input-field" />
                <input placeholder="Password" type="password" @bind-value="newData.Password" class="input-field" />
                <button type="submit" class="submit-button">Speichern</button>
            </EditForm>
        }
        <div class="action-buttons">
            <button @onclick="@Add" class="action-button">Add +</button>
            <button @onclick="@Logout" class="action-button">Logout</button>
        </div>
        <div>
            <div style="display: flex; justify-content: center; flex-direction: column; align-items: center">
                <div>
                    <h4>Daten</h4>
                </div>
                <div class="search-box" >
                    <FluentSearch Placeholder="Suchen" Value="@filterCriteria" ValueChanged="@((value) => { filterCriteria = value; StateHasChanged(); })" Style=""></FluentSearch>
                </div>
            </div>
            <FluentDataGrid TGridItem="AuthenticationData" Items="AuthenticationDatas" Pagination="State">
                <PropertyColumn Property="@(x => x.Provider)" Title="Provider" Sortable="true"></PropertyColumn>
                <PropertyColumn Property="@(x => x.Username)" Title="Username" Sortable="true"></PropertyColumn>
                <TemplateColumn Context="context" Title="Password">
                    @if (openPasswordIndex.HasValue && openPasswordIndex.Value == user.AuthenticationDatas.IndexOf(context))
                    {
                        <input readonly @bind-value="@context.Password" class="input-field"></input>
                    }
                    else
                    {
                        <input readonly placeholder="*****" class="input-field" />
                    }
                </TemplateColumn>
                <TemplateColumn Context="context" Title="Password anzeigen">
                    @if (openPasswordIndex.HasValue && openPasswordIndex.Value == user.AuthenticationDatas.IndexOf(context))
                    {
                        <button @onclick="@( () => OpenPassword(null))" class="toggle-button">Schließen</button>
                    }
                    else
                    {
                        <button @onclick="@(() => OpenPassword(user.AuthenticationDatas.IndexOf(context)))" class="toggle-button">Öffnen</button>
                    }
                </TemplateColumn>
                <TemplateColumn Title="Delete">
                    <button @onclick="@(async () => await DeleteData(user.AuthenticationDatas.IndexOf(context)))" class="action-button">X</button>
                </TemplateColumn>
            </FluentDataGrid>
            <FluentPaginator State="State"></FluentPaginator>
        </div>
    }
    else
    {
        <p>loading...</p>
    }
</div>
